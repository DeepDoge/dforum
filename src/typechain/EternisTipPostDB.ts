/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
	BaseContract,
	BigNumber,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
	utils,
} from "ethers"
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from "./common"

export interface EternisTipPostDBInterface extends utils.Interface {
	functions: {
		"post(bytes,address)": FunctionFragment
		"postIndex()": FunctionFragment
	}

	getFunction(nameOrSignatureOrTopic: "post" | "postIndex"): FunctionFragment

	encodeFunctionData(functionFragment: "post", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
	encodeFunctionData(functionFragment: "postIndex", values?: undefined): string

	decodeFunctionResult(functionFragment: "post", data: BytesLike): Result
	decodeFunctionResult(functionFragment: "postIndex", data: BytesLike): Result

	events: {
		"EternisPost(uint256,bytes)": EventFragment
		"EternisTip(uint256,address)": EventFragment
	}

	getEvent(nameOrSignatureOrTopic: "EternisPost"): EventFragment
	getEvent(nameOrSignatureOrTopic: "EternisTip"): EventFragment
}

export interface EternisPostEventObject {
	postIndex: BigNumber
	postData: string
}
export type EternisPostEvent = TypedEvent<[BigNumber, string], EternisPostEventObject>

export type EternisPostEventFilter = TypedEventFilter<EternisPostEvent>

export interface EternisTipEventObject {
	postIndex: BigNumber
	tipTo: string
}
export type EternisTipEvent = TypedEvent<[BigNumber, string], EternisTipEventObject>

export type EternisTipEventFilter = TypedEventFilter<EternisTipEvent>

export interface EternisTipPostDB extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: EternisTipPostDBInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		post(
			postData: PromiseOrValue<BytesLike>,
			tipTo: PromiseOrValue<string>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>

		postIndex(overrides?: CallOverrides): Promise<[BigNumber]>
	}

	post(
		postData: PromiseOrValue<BytesLike>,
		tipTo: PromiseOrValue<string>,
		overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>

	postIndex(overrides?: CallOverrides): Promise<BigNumber>

	callStatic: {
		post(postData: PromiseOrValue<BytesLike>, tipTo: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

		postIndex(overrides?: CallOverrides): Promise<BigNumber>
	}

	filters: {
		"EternisPost(uint256,bytes)"(postIndex?: null, postData?: null): EternisPostEventFilter
		EternisPost(postIndex?: null, postData?: null): EternisPostEventFilter

		"EternisTip(uint256,address)"(postIndex?: null, tipTo?: null): EternisTipEventFilter
		EternisTip(postIndex?: null, tipTo?: null): EternisTipEventFilter
	}

	estimateGas: {
		post(
			postData: PromiseOrValue<BytesLike>,
			tipTo: PromiseOrValue<string>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>

		postIndex(overrides?: CallOverrides): Promise<BigNumber>
	}

	populateTransaction: {
		post(
			postData: PromiseOrValue<BytesLike>,
			tipTo: PromiseOrValue<string>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>

		postIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>
	}
}

type Post @entity(immutable: true) {
	# We need chainId on the postId because we can reply to a post from another chain
	# and having chain id on all post ids makes it easier.
	id: Bytes! # chainId length(u8) + chainId(known length) + post counter(dynamic)
	parentId: Bytes! # post id(dynamic)
	index: BigInt!
	author: Bytes! # address
	contract: Bytes! # address
	contents: [PostContent!]!
	blockTimestamp: BigInt!
}

# Off-chain content metadata for the post, per chain
type PostContent @entity(immutable: true) {
	id: Bytes! # content index(u8) + post id(dynamic)
	type: Bytes!
	value: Bytes!
}

# Used for counting the replies of a post, per chain
type PostReplyCounter @entity {
	id: Bytes! # post id(dynamic)
	count: BigInt!
}

# Used for counting posts, per chain
type PostCounter @entity {
	id: Bytes! # post id(dynamic)
	count: BigInt!
}
